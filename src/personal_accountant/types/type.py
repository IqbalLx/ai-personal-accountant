from typing import Optional
from pydantic import BaseModel, Field


class Spending(BaseModel):
    id: Optional[int] = Field(
        None,
        description="A unique identifier, it will be generated by DB, leave it empty",
    )
    type: str = Field(
        ...,
        description="The type of document from which the spending data was extracted (e.g., 'receipt', 'invoice', 'bank statement', 'billing')",
    )
    currency: str = Field(..., description="e.g., USD, EUR, IDR")
    transaction_date: str = Field(..., description="Format: YYYY-MM-DD")
    transaction_time: Optional[str] = Field(None, description="Format: HH:MM:SS")
    transaction_category: Optional[str] = Field(
        None,
        description="Overall category for the transaction (e.g., Dining, Groceries, Travel)",
    )

    # Merchant Info fields (prefixed)
    merchant_name: str = Field(
        ...,
        description="The name of the merchant or vendor where the transaction occurred.",
    )
    merchant_address: Optional[str] = Field(
        None, description="The physical address of the merchant."
    )
    merchant_phone: Optional[str] = Field(
        None, description="The phone number of the merchant."
    )
    merchant_website: Optional[str] = Field(
        None, description="The website URL of the merchant."
    )
    merchant_tax_id: Optional[str] = Field(
        None, description="The tax identification number of the merchant, if available."
    )

    # Summary fields (prefixed)
    summary_subtotal: float = Field(
        ...,
        description="The total cost of goods or services before any discounts, taxes, or shipping.",
    )
    summary_discount_amount: Optional[float] = Field(
        None,
        description="The total amount of any discounts applied to the transaction.",
    )
    summary_tax_amount: Optional[float] = Field(
        None, description="The total amount of tax applied to the transaction."
    )
    summary_shipping_amount: Optional[float] = Field(
        None, description="The cost of shipping or delivery for the transaction."
    )
    summary_total_amount: float = Field(
        ...,
        description="The final total amount of the transaction, including subtotal, taxes, shipping, and after discounts.",
    )
    summary_amount_paid: Optional[float] = Field(
        None, description="The actual amount paid by the customer."
    )
    summary_change_due: Optional[float] = Field(
        None,
        description="The amount of change returned to the customer, if applicable.",
    )

    # Payment Info fields (prefixed)
    payment_method: Optional[str] = Field(
        None,
        description="The method used for payment (e.g., 'Credit Card', 'Cash', 'Debit Card', 'Bank Transfer', 'Digital Wallet').",
    )
    payment_card_type: Optional[str] = Field(
        None,
        description="The type of payment card used (e.g., 'Cash', 'Visa', 'Mastercard', 'Shopee Pay', 'Gopay', 'OVO').",
    )
    payment_transaction_id: Optional[str] = Field(
        None, description="A unique identifier for the payment transaction."
    )

    notes: Optional[str] = Field(
        None,
        description="Any additional notes or comments related to the spending entry.",
    )


class SpendingItem(BaseModel):
    id: Optional[int] = Field(
        None,
        description="A unique identifier, it will be generated by DB, leave it empty",
    )
    spending_id: Optional[int] = Field(
        None,
        description="A foreign-key identifier, it will be generated by DB, leave it empty",
    )
    description: str = Field(
        ..., description="A description of the individual item or service."
    )
    quantity: float = Field(..., description="The quantity of the item purchased.")
    unit_price: float = Field(..., description="The price per unit of the item.")
    total: float = Field(
        ...,
        description="The total cost for this specific line item (quantity * unit_price).",
    )
